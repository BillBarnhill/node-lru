// Generated by IcedCoffeeScript 108.0.9
(function() {
  var Item, LRU;

  Item = (function() {
    function Item(k, v, s) {
      this.k = k;
      this.v = v;
      this.s = s;
      this.p = this.n = void 0;
      this.a = Date.now();
    }

    return Item;

  })();

  LRU = (function() {
    function LRU(options) {
      var max_age_ms, max_storage, size_fn, _ref;
      _ref = options || {}, max_storage = _ref.max_storage, max_age_ms = _ref.max_age_ms, size_fn = _ref.size_fn;
      this.max_storage = max_storage || Infinity;
      this.max_age_ms = max_age_ms || Infinity;
      this.size_fn = size_fn || function() {
        return 1;
      };
      this.item_lookup = {};
      this.head = this.tail = void 0;
      this.used_storage = 0;
    }

    LRU.prototype.log_me = function() {

      /*
      Useful just for running some tests/debugging/hunting for mem leaks
       */
      var h, items, k, t, v, _ref;
      items = [];
      _ref = this.item_lookup;
      for (k in _ref) {
        v = _ref[k];
        items.push("" + k + "=" + v.v);
      }
      console.log("I: " + items.join(", "));
      h = this.head;
      items = [];
      while (h != null) {
        items.push("" + h.k + "=" + h.v);
        h = h.n;
      }
      console.log("H: " + items.join("->"));
      items = [];
      t = this.tail;
      while (t) {
        items.push("" + t.k + "=" + t.v);
        t = t.p;
      }
      return console.log("T: " + items.join("<-"));
    };

    LRU.prototype.put = function(k, v) {
      var e;
      this.maybePurge();
      if (this.has(k)) {
        this.remove(k);
      }
      e = new Item(k, v, this.size_fn(v, k));
      this.item_lookup[k] = e;
      if (this.tail) {
        this.tail.n = e;
        e.p = this.tail;
      } else {
        this.head = e;
      }
      this.tail = e;
      this.used_storage += e.s;
      this.maybePurge();
      return this;
    };

    LRU.prototype.maybePurge = function() {
      var now, _results;
      now = Date.now();
      _results = [];
      while ((this.used_storage > this.max_storage) || (this.used_storage > 0 && (now - this.head.a > this.max_age_ms))) {
        _results.push(this.purgeHead());
      }
      return _results;
    };

    LRU.prototype.purgeHead = function() {
      var e;
      e = this.head;
      if (e) {
        this.used_storage -= e.s;
        if (this.head.n != null) {
          this.head = this.head.n;
          this.head.p = void 0;
        } else {
          this.head = void 0;
          this.tail = void 0;
        }
        e.n = e.p = void 0;
        delete this.item_lookup[e.k];
      }
      return e;
    };

    LRU.prototype.get = function(k) {
      var e;
      this.maybePurge();
      e = this.item_lookup[k];
      if (e == null) {
        return void 0;
      } else if (Date.now() - e.a > this.max_age_ms) {
        this.remove(k);
        return void 0;
      }
      if (e === this.tail) {
        return e.v;
      }
      if (e.n) {
        if (e === this.head) {
          this.head = e.n;
        }
        e.n.p = e.p;
      }
      if (e.p) {
        e.p.n = e.n;
      }
      e.n = void 0;
      e.p = this.tail;
      if (this.tail) {
        this.tail.n = e;
      }
      this.tail = e;
      return e.v;
    };

    LRU.prototype.remove = function(k) {
      var e;
      e = this.item_lookup[k];
      if (e == null) {
        return void 0;
      }
      this.used_storage -= e.s;
      delete this.item_lookup[e.k];
      if ((e.n != null) && (e.p != null)) {
        e.p.n = e.n;
        e.n.p = e.p;
      } else if (e.n != null) {
        e.n.p = void 0;
        this.head = e.n;
      } else if (e.p != null) {
        e.p.n = void 0;
        this.tail = e.p;
      } else {
        this.head = void 0;
        this.tail = void 0;
      }
      return e.v;
    };

    LRU.prototype.has = function(k) {
      var e;
      this.maybePurge();
      e = this.item_lookup[k];
      if (e == null) {
        return false;
      } else if (Date.now() - e.a > this.max_age_ms) {
        this.remove(k);
        return false;
      } else {
        return true;
      }
    };

    LRU.prototype.toArray = function() {
      var n, res;
      this.maybePurge();
      res = [];
      n = this.head;
      while (n != null) {
        res.push({
          k: n.k,
          v: n.v,
          a: n.a,
          s: n.s
        });
        n = n.n;
      }
      return res;
    };

    LRU.prototype.size = function() {
      return this.used_storage;
    };

    return LRU;

  })();

  module.exports = LRU;

}).call(this);
